%expect A 2 x 11, r e 1
%B 2 x 19, r e*r 1
function divide_unknowns(A, B)
    %a) reparametrize into % v = [ab, ac, ad, bc, bd, cd, a2, b2, c2, d2,1] = [v0 1]
    %in cols:
    %    R3sym = [a^2+b^2-c^2-d^2, 2*b*c-2*a*d, 2*b*d+2*a*c;
%         2*b*c+2*a*d, a^2-b^2+c^2-d^2, 2*c*d-2*a*b;
%         2*b*d-2*a*c, 2*c*d+2*a*b, a^2-b^2-c^2+d^2];
    R2Q = zeros(9, 10);
    R2Q(1, [7 8 9 10]) = [1 1 -1 -1];
    R2Q(2, [4 3]) = 2;
    R2Q(3, [5, 2]) = [2, -2];
    R2Q(4, [4 3]) = [2, -2];
    R2Q(5, [7 8 9 10]) = [1, -1, 1, -1];
    R2Q(6, [6, 1]) = 2;
    R2Q(7, [5 2]) = 2;
    R2Q(8, [6 1]) = [2, -2];
    R2Q(9, [7 8 9 10]) = [1, -1, -1, 1];
    %A -> A2:2 x 12 (quat + e)
    C2Q = zeros(1, 10);
    C2Q(1, [7 8 9 10]) = 1;
    ET = zeros(1, 11);
    ET(11) = 1;
    Ta = [R2Q zeros(9, 10);
          zeros(1, 10) C2Q;
          C2Q zeros(1,10)];
    %v0 e*v0
    if (size(A, 2) == 11)
        AQ = A*Ta;
    else
        B = [A; B];
    end
    Tb = [R2Q zeros(9, 10);
          zeros(9, 10) R2Q;
          C2Q zeros(1,10)];
    BQ = B*Tb;
    if (size(A, 2) == 11)
        M = [AQ; BQ];    
    else
        M = BQ;
    end
    %b) reparametrize into X [ b,c,1]^T + Y[ bc, b^2, c^2] by dividing by d
    am_inds = [1 2 4 5 6 7 10];
    X0 = M(:, [am_inds am_inds+10]);
    rem_inds = [3 8 9];
    Y = M(:, [rem_inds rem_inds+10]);
    
    %works only for case 4
    Y(1, :) = Y(1, :) - Y(2, :);
    Y(3, :) = Y(3, :) - Y(4, :);
    Y = Y([1 3 2 4], :);
    X0(1, :) = X0(1, :) - X0(2, :);
    X0(3, :) = X0(3, :) - X0(4, :);
    X0 = X0([1 3 2 4], :);
end